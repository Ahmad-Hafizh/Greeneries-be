// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid()) @map("user_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account?
  sessions      Session[]
  role          Role      @default(user)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Profile       Profile?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Profile {
  profile_id String  @id @default(cuid())
  phone      String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // personal referral
  referral Referral? @relation("referral_owner")

  // referred to
  referred_to_id String?
  referred_to    Referral? @relation("referred_to", fields: [referred_to_id], references: [referral_id])

  // addresses
  Address Address[]

  @@map("profiles")
}

enum Role {
  user
  admin
  super_admin
}

model Referral {
  referral_id   String @id @default(cuid())
  referral_code String

  // referral owner
  profile_id String  @unique
  profile    Profile @relation("referral_owner", fields: [profile_id], references: [profile_id])

  // referred users
  referred Profile[] @relation("referred_to")

  @@map("referral")
}

model Address {
  address_id   String @id @default(cuid())
  address_name String
  street       String
  country      String
  city         String
  zipcode      String
  unit         String
  lat          String
  lng          String

  deleted_at DateTime?

  profile_id String
  profile    Profile @relation(fields: [profile_id], references: [profile_id])

  @@map("address")
}
